inf = 999
g = [
    [0, 4, 3, inf, inf, inf, inf],
    [inf, 0, inf, inf, 12, 5, inf],
    [inf, inf, 0, 7, 10, inf, inf],
    [inf, inf, inf, 0, inf, inf, 5],
    [inf, inf, inf, inf, 0, inf, 16],
    [inf, inf, inf, inf, inf, 0, 0],
]

h = {0: 12, 1: 14, 2: 11, 3: 6, 4: 4, 5: 11, 6: 0}  # Corrected heuristic values

Src = 0
goal = 6

class Obj:
    def __init__(self, cost, path):
        self.cost = cost
        self.path = path

arr = []
new_item = Obj(h[Src], [Src])
arr.append(new_item)

while arr:
    arr.sort(key=lambda item: item.cost)  # Sort by cost (greedy approach)
    
    cur_item = arr.pop(0)  # Get node with the lowest cost
    cur_node = cur_item.path[-1]
    cur_cost = cur_item.cost
    cur_path = cur_item.path

    if cur_node == goal:  # If goal is reached
        print("COST:", cur_cost)
        print("PATH:", cur_path)
        break

    for i in range(len(g)):
        if g[cur_node][i] != inf and g[cur_node][i] != 0:
            new_cost = cur_cost - h[cur_node] + h[i] + g[cur_node][i]
            new_path = cur_path + [i]
            arr.append(Obj(new_cost, new_path))

