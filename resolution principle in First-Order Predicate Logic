from sympy import symbols, Not, Or

def resolve(clause1, clause2):
    resolvent = []
    
    for literal1 in clause1:
        for literal2 in clause2:
            if literal1 == Not(literal2):
                # Remove the complementary literals and merge the clauses
                resolvent = [x for x in (clause1 + clause2) if x != literal1 and x != literal2]
                return list(set(resolvent))  # Remove duplicates

    return None  # If no resolution is possible

def resolution(clauses):
    new_clauses = list(clauses)
    
    while True:
        n = len(new_clauses)
        print("Current Clauses:", new_clauses)
        print(" ")

        pairs = [(new_clauses[i], new_clauses[j]) for i in range(n) for j in range(i + 1, n)]
        
        for (clause1, clause2) in pairs:
            print("Resolving:", clause1, "and", clause2)
            resolvent = resolve(clause1, clause2)
            print("Result:", resolvent)
            print(" ")

            if resolvent == []:  # Found an empty clause (contradiction)
                return True

            if resolvent and resolvent not in new_clauses:
                new_clauses.append(resolvent)

        if n == len(new_clauses):  # No new clauses added, process is complete
            return False

if __name__ == "__main__":
    # Define symbols
    P, Q = symbols('P Q')

    # Define clauses
    clause1 = [P, Not(Q)]
    clause2 = [Not(P), Q]
    clause3 = [Not(P), Not(Q)]

    clauses = [clause1, clause2, clause3]

    result = resolution(clauses)

    if result:
        print("The set of clauses is unsatisfiable (contradiction found).")
    else:
        print("The set of clauses is satisfiable.")
